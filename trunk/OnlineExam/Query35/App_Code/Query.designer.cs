#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QueryProcessing")]
public partial class QueryDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InserttblType(tblType instance);
  partial void UpdatetblType(tblType instance);
  partial void DeletetblType(tblType instance);
  partial void InserttblSource(tblSource instance);
  partial void UpdatetblSource(tblSource instance);
  partial void DeletetblSource(tblSource instance);
  #endregion
	
	public QueryDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QueryProcessingConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public QueryDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public QueryDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public QueryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public QueryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<tblType> tblTypes
	{
		get
		{
			return this.GetTable<tblType>();
		}
	}
	
	public System.Data.Linq.Table<tblSource> tblSources
	{
		get
		{
			return this.GetTable<tblSource>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblTypes")]
public partial class tblType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _Id;
	
	private string _TypeName;
	
	private EntitySet<tblSource> _tblSources;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
	
	public tblType()
	{
		this._tblSources = new EntitySet<tblSource>(new Action<tblSource>(this.attach_tblSources), new Action<tblSource>(this.detach_tblSources));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)")]
	public string TypeName
	{
		get
		{
			return this._TypeName;
		}
		set
		{
			if ((this._TypeName != value))
			{
				this.OnTypeNameChanging(value);
				this.SendPropertyChanging();
				this._TypeName = value;
				this.SendPropertyChanged("TypeName");
				this.OnTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblType_tblSource", Storage="_tblSources", ThisKey="Id", OtherKey="FK_TypeId")]
	public EntitySet<tblSource> tblSources
	{
		get
		{
			return this._tblSources;
		}
		set
		{
			this._tblSources.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tblSources(tblSource entity)
	{
		this.SendPropertyChanging();
		entity.tblType = this;
	}
	
	private void detach_tblSources(tblSource entity)
	{
		this.SendPropertyChanging();
		entity.tblType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSource")]
public partial class tblSource : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _Id;
	
	private string _LocationName;
	
	private System.Nullable<decimal> _Latitude;
	
	private System.Nullable<decimal> _Lontitude;
	
	private System.Nullable<long> _FK_TypeId;
	
	private EntityRef<tblType> _tblType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLontitudeChanging(System.Nullable<decimal> value);
    partial void OnLontitudeChanged();
    partial void OnFK_TypeIdChanging(System.Nullable<long> value);
    partial void OnFK_TypeIdChanged();
    #endregion
	
	public tblSource()
	{
		this._tblType = default(EntityRef<tblType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(50)")]
	public string LocationName
	{
		get
		{
			return this._LocationName;
		}
		set
		{
			if ((this._LocationName != value))
			{
				this.OnLocationNameChanging(value);
				this.SendPropertyChanging();
				this._LocationName = value;
				this.SendPropertyChanged("LocationName");
				this.OnLocationNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(18,7)")]
	public System.Nullable<decimal> Latitude
	{
		get
		{
			return this._Latitude;
		}
		set
		{
			if ((this._Latitude != value))
			{
				this.OnLatitudeChanging(value);
				this.SendPropertyChanging();
				this._Latitude = value;
				this.SendPropertyChanged("Latitude");
				this.OnLatitudeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lontitude", DbType="Decimal(18,7)")]
	public System.Nullable<decimal> Lontitude
	{
		get
		{
			return this._Lontitude;
		}
		set
		{
			if ((this._Lontitude != value))
			{
				this.OnLontitudeChanging(value);
				this.SendPropertyChanging();
				this._Lontitude = value;
				this.SendPropertyChanged("Lontitude");
				this.OnLontitudeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_TypeId", DbType="BigInt")]
	public System.Nullable<long> FK_TypeId
	{
		get
		{
			return this._FK_TypeId;
		}
		set
		{
			if ((this._FK_TypeId != value))
			{
				if (this._tblType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFK_TypeIdChanging(value);
				this.SendPropertyChanging();
				this._FK_TypeId = value;
				this.SendPropertyChanged("FK_TypeId");
				this.OnFK_TypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblType_tblSource", Storage="_tblType", ThisKey="FK_TypeId", OtherKey="Id", IsForeignKey=true)]
	public tblType tblType
	{
		get
		{
			return this._tblType.Entity;
		}
		set
		{
			tblType previousValue = this._tblType.Entity;
			if (((previousValue != value) 
						|| (this._tblType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tblType.Entity = null;
					previousValue.tblSources.Remove(this);
				}
				this._tblType.Entity = value;
				if ((value != null))
				{
					value.tblSources.Add(this);
					this._FK_TypeId = value.Id;
				}
				else
				{
					this._FK_TypeId = default(Nullable<long>);
				}
				this.SendPropertyChanged("tblType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
